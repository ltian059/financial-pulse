AWSTemplateFormatVersion: '2010-09-09'
Description: Financial Pulse Account Service Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  AmiId:
    Description: The Amazon Linux 2 AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0c3391e886cc52a28
  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    Description: EC2 Instance type

  VPCStackName:
    Type: String
    Default: fp-vpc-dev
    Description: VPC Stack name

  SecurityStackName:
    Type: String
    Default: fp-security-dev
    Description: Security Stack name

  DynamoDBStackName:
    Type: String
    Default: fp-dynamo-dev
    Description: DynamoDB Tables Stack name


Resources:
  AccountServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: !Sub fp-account-role-${Environment}
        - Key: Service
          Value: account
  AccountServiceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AccountServiceRole


  AccountServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref AccountServiceInstanceProfile
      KeyName: fp-keypair
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${SecurityStackName}-ApplicationSecurityGroupId
      SubnetId:
        Fn::ImportValue: !Sub ${VPCStackName}-PublicSubnet1Id
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install Java 17, AWS CLI v2, and SSM
          yum install -y java-17-amazon-corretto-headless wget unzip
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Install and start SSM Agent
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Install CloudWatch Agent
          yum install -y amazon-cloudwatch-agent
          
          # Create CloudWatch Agent configuration
          cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json << 'EOF'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "cwagent"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/app/app.log",
                      "log_group_class": "STANDARD",
                      "log_group_name": "/aws/ec2/financial-pulse/account/dev",
                      "log_stream_name": "{instance_id}",
                      "retention_in_days": 14
                    }
                  ]
                }
              }
            },
            "metrics": {
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60,
                  "totalcpu": false
                },
                "disk": {
                  "measurement": [
                    "used_percent",
                    "inodes_free"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "diskio": {
                  "measurement": [
                    "io_time"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                },
                "swap": {
                  "measurement": [
                    "swap_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch Agent with specific configuration file
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
        
          # Enable and start CloudWatch Agent service
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent
          
          # Create app directory
          mkdir -p /opt/app
          
          # Change ownership to ec2-user (UserData runs as root, so no sudo needed here)
          chown -R ec2-user:ec2-user /opt/app
          
          # Set proper permissions
          chmod 755 /opt/app
          
          # Create status file as root, then change ownership
          echo "EC2 instance setup completed at $(date)" > /opt/app/setup-status.txt
          chown ec2-user:ec2-user /opt/app/setup-status.txt
          
          # Verify Java installation as root, then change ownership
          java -version > /opt/app/java-version.txt 2>&1
          chown ec2-user:ec2-user /opt/app/java-version.txt
          
          # Ensure all files in /opt/app belong to ec2-user
          chown -R ec2-user:ec2-user /opt/app
          
          # Log the setup completion
          echo "Setup completed successfully" >> /var/log/user-data.log

      Tags:
        - Key: Name
          Value: !Sub fp-account-service-${Environment}

Outputs:
  InstanceId:
    Description: Instance ID of the Account Service
    Value: !Ref AccountServiceInstance
    Export:
      Name: !Sub ${AWS::StackName}-InstanceId

  PublicIp:
    Description: Public IP of the EC2 instance
    Value: !GetAtt AccountServiceInstance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-PublicIp

  ServiceEndpoint:
    Description: Internal service endpoint (public IP)
    Value: !Sub "http://${AccountServiceInstance.PublicIp}:8080"
    Export:
      Name: !Sub ${AWS::StackName}-ServiceEndpoint

  # Reference to DynamoDB tables (from imported stack)
  AccountTableName:
    Description: Name of the Account DynamoDB table
    Value:
      Fn::ImportValue: !Sub ${DynamoDBStackName}-AccountTableName

  RevokedJwtTableName:
    Description: Name of the Revoked JWT DynamoDB table
    Value:
      Fn::ImportValue: !Sub ${DynamoDBStackName}-RevokedJwtTableName
  # Environment variables for application deployment
  DynamoDBConfiguration:
    Description: DynamoDB configuration for application
    Value: !Sub
      - "Region: ${Region}, TablePrefix: ${TablePrefix}, TableSuffix: ${TableSuffix}"
      - Region:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-DynamoDBRegion
        TablePrefix:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-TablePrefix
        TableSuffix:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-TableSuffix