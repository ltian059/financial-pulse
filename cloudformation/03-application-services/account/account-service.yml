AWSTemplateFormatVersion: '2010-09-09'
Description: Financial Pulse Account Service Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  AmiId:
    Description: The Amazon Linux 2 AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0c3391e886cc52a28
  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    Description: EC2 Instance type

  VPCStackName:
    Type: String
    Default: fp-vpc-dev
    Description: VPC Stack name

  SecurityStackName:
    Type: String
    Default: fp-security-dev
    Description: Security Stack name

  DynamoDBStackName:
    Type: String
    Default: fp-dynamo-dev
    Description: DynamoDB Tables Stack name


Resources:
  AccountServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub fp-account-role-${Environment}
        - Key: Service
          Value: account
  AccountServiceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AccountServiceRole


  AccountServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref AccountServiceInstanceProfile
      KeyName: fp-keypair
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${SecurityStackName}-ApplicationSecurityGroupId
      SubnetId:
        Fn::ImportValue: !Sub ${VPCStackName}-PrivateSubnet1Id
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install Java 17, AWS CLI v2, and SSM
          yum install -y java-17-amazon-corretto-headless wget unzip
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Install and start SSM Agent
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create app directory
          mkdir -p /opt/app
          
          # Change ownership to ec2-user (UserData runs as root, so no sudo needed here)
          chown -R ec2-user:ec2-user /opt/app
          
          # Set proper permissions
          chmod 755 /opt/app
          
          # Create status file as root, then change ownership
          echo "EC2 instance setup completed at $(date)" > /opt/app/setup-status.txt
          chown ec2-user:ec2-user /opt/app/setup-status.txt
          
          # Verify Java installation as root, then change ownership
          java -version > /opt/app/java-version.txt 2>&1
          chown ec2-user:ec2-user /opt/app/java-version.txt
          
          # Ensure all files in /opt/app belong to ec2-user
          chown -R ec2-user:ec2-user /opt/app
          
          # Log the setup completion
          echo "Setup completed successfully" >> /var/log/user-data.log

      Tags:
        - Key: Name
          Value: fp-account-service-${Environment}
  # Associate Elastic IP with Instance
#  AccountServiceEIPAssociation:
#    Type: AWS::EC2::EIPAssociation
#    Properties:
#      AllocationId: !Ref ElasticIPAllocationId
#      InstanceId: !Ref AccountServiceInstance

Outputs:
  InstanceId:
    Description: Instance ID of the Account Service
    Value: !Ref AccountServiceInstance
    Export:
      Name: !Sub ${AWS::StackName}-InstanceId

  PrivateIP:
    Description: Private IP of the EC2 instance
    Value: !GetAtt AccountServiceInstance.PrivateIp
    Export:
      Name: !Sub ${AWS::StackName}-PrivateIP

#  PublicIp:
#    Description: Public IP of the EC2 instance
#    Value: !GetAtt AccountServiceInstance.PublicIp
#    Export:
#      Name: !Sub ${AWS::StackName}-PublicIp

  ServiceEndpoint:
    Description: Internal service endpoint (private IP)
    Value: !Sub "http://${AccountServiceInstance.PrivateIp}:8080"
    Export:
      Name: !Sub ${AWS::StackName}-ServiceEndpoint

  # Reference to DynamoDB tables (from imported stack)
  AccountTableName:
    Description: Name of the Account DynamoDB table
    Value:
      Fn::ImportValue: !Sub ${DynamoDBStackName}-AccountTableName

  RevokedJwtTableName:
    Description: Name of the Revoked JWT DynamoDB table
    Value:
      Fn::ImportValue: !Sub ${DynamoDBStackName}-RevokedJwtTableName
  # Environment variables for application deployment
  DynamoDBConfiguration:
    Description: DynamoDB configuration for application
    Value: !Sub
      - "Region: ${Region}, TablePrefix: ${TablePrefix}, TableSuffix: ${TableSuffix}"
      - Region:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-DynamoDBRegion
        TablePrefix:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-TablePrefix
        TableSuffix:
          Fn::ImportValue: !Sub ${DynamoDBStackName}-TableSuffix