name: Deploy Account Service

on:
  push:
    branches: [ master, test-deployment ]
    paths:
      - 'fp-account/**'
      - 'fp-common/**'
      - '.github/workflows/deploy-account.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar-name: ${{steps.build.outputs.jar-name}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        id: build
        run: |
          # First install the parent POM
          mvn clean install -N
          # Then install fp-common
          mvn clean install -pl fp-common -DskipTests
          # Finally build fp-account
          mvn clean package -pl fp-account -DskipTests
          JAR_NAME=$(ls fp-account/target/fp-account-*.jar | head -1 | xargs basename)
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Built JAR: $JAR_NAME"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: account-service-jar
          path: fp-account/target/fp-account-*.jar
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: account-service-jar
          path: ./

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/fp-keypair.pem
          chmod 600 /tmp/fp-keypair.pem

      - name: Create environment configuration
        run: |
          cat > .env << EOF
          # Application Configuration
          SPRING_PROFILES_ACTIVE=${{ github.event.inputs.environment || 'dev' }}
  
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
  
          # AWS Configuration
          AWS_REGION=${{ secrets.AWS_REGION }}
          
          # Server port
          SERVER_PORT=8080
          
          # External Services Configuration
          EXTERNAL_SERVICES_ACCOUNT_SERVICE_ENABLED=false
          EXTERNAL_SERVICES_CONTENT_SERVICE_URL=http://localhost:8081
          EXTERNAL_SERVICES_FOLLOW_SERVICE_URL=http://localhost:8082
          EOF

          echo "Environment configuration created"
          

      - name: Deploy to EC2
        run: |
          EC2_HOST=${{ secrets.EC2_HOST }}
          
          echo "Deploying to EC2 instance: $EC2_HOST"
          
          # Copy JAR file
          echo "Copying JAR file..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            ${{ needs.build.outputs.jar-name }} \
            ec2-user@$EC2_HOST:/opt/app/fp-account.jar
          
          # Copy environment configuration
          echo "Copying environment configuration..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            .env \
            ec2-user@$EC2_HOST:/opt/app/.env
          
          # Deploy using custom scripts only
          echo "Deploying application using custom scripts..."
          ssh -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            ec2-user@$EC2_HOST << 'REMOTE_SCRIPT'
            # Navigate to the application directory
            cd /opt/app
            # Ensure proper permissions
            chmod 644 .env
            chmod 644 fp-account.jar
            
            # stop existing service
            ./stop.sh || true
    
            # start new service
            ./start.sh
          
          REMOTE_SCRIPT
          
          echo "Deployment completed!"