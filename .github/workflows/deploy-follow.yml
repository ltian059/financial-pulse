name: Deploy Follow Service

on:
  push:
    branches: [ master ]
    paths:
      - 'fp-follow/**'
      - 'fp-common/**'
      - '.github/workflows/deploy-follow.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'follow-dev'
        type: choice
        options:
          - follow-dev
          - follow-test
          - follow-prod

jobs:
  validate-env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: Validate environment variables
        run: |
          python scripts/validate-env-vars.py follow

  build:
    runs-on: ubuntu-latest
    needs: [validate-env]
    outputs:
      jar-name: ${{steps.build.outputs.jar-name}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        id: build
        run: |
          # First install the parent POM
          mvn clean install -N
          # Then install fp-common
          mvn clean install -pl fp-common -DskipTests
          # Finally build fp-follow
          mvn clean package -pl fp-follow -DskipTests
          JAR_NAME=$(ls fp-follow/target/fp-follow-*.jar | head -1 | xargs basename)
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Built JAR: $JAR_NAME"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: follow-service-jar
          path: fp-follow/target/fp-follow-*.jar
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    # The Environment currently deploying to
    environment: ${{ github.event.inputs.environment || 'follow-dev'}}

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: follow-service-jar
          path: ./

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/fp-keypair.pem
          chmod 600 /tmp/fp-keypair.pem

      - name: Determine Spring Profile
        id: profile
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'follow-dev' }}"
          SPRING_PROFILE=${ENV_NAME#*-} # Remove 'follow-' prefix
          echo "Environment: $ENV_NAME"
          echo "Spring Profile: $SPRING_PROFILE"
          echo "profile=$SPRING_PROFILE" >> $GITHUB_OUTPUT
          

      - name: Create environment configuration
        run: |
          cat > .env << EOF
          # Application Configuration
          SPRING_PROFILES_ACTIVE=${{ steps.profile.outputs.profile }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # AWS Configuration
          AWS_REGION=${{ vars.AWS_REGION }}
          
          # Server port
          SERVER_PORT=8082
          
          # Database Configuration
          FOLLOW_DB_URL=${{ secrets.FOLLOW_DB_URL }}
          FOLLOW_DB_USERNAME=${{ secrets.FOLLOW_DB_USERNAME }}
          FOLLOW_DB_PASSWORD=${{ secrets.FOLLOW_DB_PASSWORD }}
          
          # External Services Configuration
          SERVICES_ACCOUNT_URL=${{ vars.SERVICES_ACCOUNT_URL }}
          SERVICES_CONTENT_URL=${{ vars.SERVICES_CONTENT_URL }}
          SERVICES_FOLLOW_URL=${{ vars.SERVICES_FOLLOW_URL }}
          EOF

          echo "Environment configuration created"

      - name: Debug Environment Variables
        run: |
          echo "Current environment: ${{ github.event.inputs.environment }}"
          echo "Profile: ${{ steps.profile.outputs.profile }}"
          echo "JWT_SECRET exists: ${{ secrets.JWT_SECRET != '' }}"
          echo "FOLLOW_DB_URL exists: ${{ secrets.FOLLOW_DB_URL != '' }}"
          echo "FOLLOW_DB_USERNAME exists: ${{ secrets.FOLLOW_DB_USERNAME != '' }}"
          echo "FOLLOW_DB_PASSWORD exists: ${{ secrets.FOLLOW_DB_PASSWORD != '' }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          

      - name: Set up start script
        run: |
          cat > start.sh << 'EOF'
          #!/bin/bash
          
          # start.sh - Financial Pulse Follow Service Startup Script
          # Place this file at /opt/app/start.sh on EC2 instance
          cd /opt/app
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          log_info() {
            echo -e "${GREEN}[INFO]${NC} $1"
          }
          
          log_warning() {
            echo -e "${YELLOW}[WARNING]${NC} $1"
          }
          
          log_error() {
            echo -e "${RED}[ERROR]${NC} $1"
          }
          
          # Load environment variables from .env file
          load_environment() {
            if [ -f .env ]; then
            log_info "Loading environment variables from .env file..."
            # Export variables while filtering out comments and empty lines
            export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
            log_info "Environment variables loaded successfully"
            else
            log_error ".env file not found!"
            log_error "Please ensure the deployment process has created the .env file"
            exit 1
            fi
          }
          
          # Validate critical configuration
          validate_configuration() {
            log_info "Validating application configuration..."
          
            # Check JWT Secret
            if [ -z "$JWT_SECRET" ]; then
            log_error "JWT_SECRET is not set"
            exit 1
            fi
          
            if [ ${#JWT_SECRET} -lt 10 ]; then
            log_error "JWT_SECRET is too short (minimum 10 characters)"
            exit 1
            fi
          
            # Check Database Configuration
            if [ -z "$FOLLOW_DB_URL" ]; then
            log_error "FOLLOW_DB_URL is not set"
            exit 1
            fi
          
            if [ -z "$FOLLOW_DB_USERNAME" ]; then
            log_error "FOLLOW_DB_USERNAME is not set"
            exit 1
            fi
          
            if [ -z "$FOLLOW_DB_PASSWORD" ]; then
            log_error "FOLLOW_DB_PASSWORD is not set"
            exit 1
            fi
          
            log_info "Configuration validation completed"
          }
          
          # Check if JAR file exists
          check_jar_file() {
            if [ ! -f "fp-follow.jar" ]; then
            log_error "fp-follow.jar not found!"
            log_error "Please deploy the application JAR file first"
            exit 1
            fi
          
          log_info "JAR file found: fp-follow.jar"
          }
          
          # Start the application
          start_application() {
            log_info "Starting Financial Pulse Follow Service..."
            log_info "Environment: $SPRING_PROFILES_ACTIVE"
            log_info "AWS Region: $AWS_REGION"
            log_info "Server Port: $SERVER_PORT"
            log_info "Database URL: $FOLLOW_DB_URL"
            log_info "JWT Secret configured: ${#JWT_SECRET} characters"
          
            # Set JVM options
            JAVA_OPTS="-Xmx512m -Xms256m"
            JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"
          
            # Create startup command
            local cmd="java $JAVA_OPTS -jar fp-follow.jar"
            LOG_FILE="app.log"
            PID_FILE="app.pid"
          
            # Start in background and redirect Java output to log file
            nohup $cmd >> "$LOG_FILE" 2>&1 &
            local app_pid=$!
          
            # Save PID to file
            echo "$app_pid" > "$PID_FILE"
          
          log_info "Application started with PID: $app_pid"
          log_info "PID saved to: $PID_FILE"
          }
          
          # Main execution
          main() {
            echo "========================================"
            echo "Financial Pulse Follow Service Startup"
            echo "========================================"
          
            load_environment
            validate_configuration
            check_jar_file
            start_application
          }
          
          # Handle script interruption
          cleanup() {
            log_warning "Application startup interrupted"
            exit 1
          }
          trap cleanup INT TERM
          
          # Run the main function
          main
          EOF

      - name: Set up stop script
        run: |
          cat > stop.sh << 'EOF'
          #!/bin/bash
          cd /opt/app

          if [ -f app.pid ]; then
              echo "Terminating Follow Service (PID: $(cat app.pid))..."
              kill $(cat app.pid)
              rm -f app.pid
              echo "Follow Service terminated"
          else
              echo "No Follow Service found running."
              # Kill any existing java processes (fallback)
              pkill -f "fp-follow.jar" 2>/dev/null || true
          fi
          EOF
          
          # Make scripts executable
          chmod +x start.sh stop.sh

      - name: Deploy to EC2
        run: |
          EC2_HOST=${{ vars.EC2_FOLLOW_HOST }}
          
          echo "Deploying to Follow Service EC2 instance: $EC2_HOST"
          
          # Copy JAR file
          echo "Copying JAR file..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            ${{ needs.build.outputs.jar-name }} \
            ec2-user@$EC2_HOST:/opt/app/fp-follow.jar
          
          # Copy environment configuration
          echo "Copying environment configuration..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            .env \
            ec2-user@$EC2_HOST:/opt/app/.env
          
          # Copy start script
          echo "Copying start script..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            start.sh \
            ec2-user@$EC2_HOST:/opt/app/start.sh
          
          # Copy stop script
          echo "Copying stop script..."
          scp -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            stop.sh \
            ec2-user@$EC2_HOST:/opt/app/stop.sh
          
          # Deploy using custom scripts only
          echo "Deploying application using custom scripts..."
          ssh -i /tmp/fp-keypair.pem -o StrictHostKeyChecking=no \
            ec2-user@$EC2_HOST << 'REMOTE_SCRIPT'
            # Navigate to the application directory
            cd /opt/app
          
            # Ensure proper permissions
            chmod 644 .env
            chmod 644 fp-follow.jar
            chmod +x start.sh
            chmod +x stop.sh
          
            # Stop existing service
            ./stop.sh || true
          
            # Start new service
            ./start.sh
          
          REMOTE_SCRIPT
          
          echo "Follow Service deployment completed!"