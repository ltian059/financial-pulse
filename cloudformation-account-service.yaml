AWSTemplateFormatVersion: '2010-09-09'
Description: Financial Pulse Account Service Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  AmiId:
    Description: The Amazon Linux 2 AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0c3391e886cc52a28
  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    Description: EC2 Instance type

  MyIPv6:
    Description: Your IPv6 address or range in CIDR format (e.g. 2001:db8::/64)
    Type: String
    Default: ::/0

  MyIPv4:
    Description: Your IPv4 address in CIDR format (if available)
    Type: String
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  AccountServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Tags:
        - Key: Name
          Value: !Sub fp-account-role-${Environment}
        - Key: Service
          Value: account

  # DynamoDB table for accounts
  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: fp-account-dev
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: account-id-index
          KeySchema:
            - AttributeName: account_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  #DynamoDB table for revoked JWTs
  RevokedJwtTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: fp-revoked-jwt-dev
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: jti
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: jti
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: account-id-index
          KeySchema:
            - AttributeName: account_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  # Security Group for EC2
  AccountServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Account Service
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref MyIPv4
          Description: Application port

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: !Ref MyIPv6
          Description: Application port for IPv6 - home network

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access

  AccountServiceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AccountServiceRole
  AccountServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref AccountServiceInstanceProfile
      KeyName: fp-keypair
      SecurityGroupIds:
        - !Ref AccountServiceSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install Java 17
          yum install -y java-17-amazon-corretto-headless wget
          
          # Create app directory
          mkdir -p /opt/app
          
          # Change ownership to ec2-user (UserData runs as root, so no sudo needed here)
          chown -R ec2-user:ec2-user /opt/app
          
          # Set proper permissions
          chmod 755 /opt/app
          
          # Create status file as root, then change ownership
          echo "EC2 instance setup completed at $(date)" > /opt/app/setup-status.txt
          chown ec2-user:ec2-user /opt/app/setup-status.txt
          
          # Verify Java installation as root, then change ownership
          java -version > /opt/app/java-version.txt 2>&1
          chown ec2-user:ec2-user /opt/app/java-version.txt
          
          # Ensure all files in /opt/app belong to ec2-user
          chown -R ec2-user:ec2-user /opt/app
          
          # Log the setup completion
          echo "Setup completed successfully" >> /var/log/user-data.log

      Tags:
        - Key: Name
          Value: fp-account-service-${Environment}
Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt AccountServiceInstance.PublicIp

  AccountTableName:
    Description: Name of the DynamoDB table
    Value: !Ref AccountTable
  RevokedJwtTableName:
    Description: Name of the DynamoDB table for revoked JWTs
    Value: !Ref RevokedJwtTable
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i fp-keypair.pem ec2-user@${AccountServiceInstance.PublicIp}"


  ServiceEndpoint:
    Description: Service endpoint
    Value: !Sub "http://${AccountServiceInstance.PublicIp}:8080"