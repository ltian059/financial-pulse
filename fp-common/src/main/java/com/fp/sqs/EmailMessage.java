package com.fp.sqs;

import com.fp.sqs.constant.EmailMessageAttributeKey;
import software.amazon.awssdk.services.sqs.model.MessageAttributeValue;

import java.util.HashMap;
import java.util.Map;


/**
 * Email Message DTO for SQS communication.
 * Contains only business data, email content is generated by EmailService
 */
public interface EmailMessage extends Message {

    EmailType getEmailType();

    @Override
    default MessageType getMessageType() {
        return getEmailType();
    }

    /**
     * Account Information
     */
    String getAccountId();

    String getEmail();

    String getName();

    String getSource();

    @Override
    Map<String, Object> getMessageBody();

    @Override
    default void validate() {
        if(getAccountId() == null || getAccountId().isEmpty()) {
            throw new IllegalArgumentException("Account ID must not be null or empty");
        }
        if (getEmail() == null || getEmail().isEmpty()) {
            throw new IllegalArgumentException("Email must not be null or empty");
        }
        if (getName() == null || getName().isEmpty()) {
            throw new IllegalArgumentException("Name must not be null or empty");
        }
        if (getSource() == null || getSource().isEmpty()) {
            throw new IllegalArgumentException("Source must not be null or empty");
        }
        Message.super.validate();
    }


    @Override
    default Map<String, MessageAttributeValue> getMessageAttributes() {
        Map<String, MessageAttributeValue> attributes = new HashMap<>();

        /**
         * Indicate the type of message being sent, can be used for routing or processing logic.
         */
        attributes.put(EmailMessageAttributeKey.MESSAGE_TYPE, MessageAttributeValue.builder()
                .stringValue(getEmailType().getType())
                .dataType("String")
                .build()
        );
        attributes.put(EmailMessageAttributeKey.SOURCE, MessageAttributeValue.builder()
                .stringValue(getSource())
                .dataType("String")
                .build());
        String domain = getEmail().substring(getEmail().indexOf("@") + 1);
        attributes.put("emailDomain", MessageAttributeValue.builder()
                .stringValue(domain)
                .dataType("String")
                .build());

        return attributes;
    }
}
